# coding: utf-8

"""
    sdk.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from agones_python_sdk.models.status_address import StatusAddress
from agones_python_sdk.models.status_counter_status import StatusCounterStatus
from agones_python_sdk.models.status_list_status import StatusListStatus
from agones_python_sdk.models.status_player_status import StatusPlayerStatus
from agones_python_sdk.models.status_port import StatusPort
from typing import Optional, Set
from typing_extensions import Self

class SdkGameServerStatus(BaseModel):
    """
    SdkGameServerStatus
    """ # noqa: E501
    state: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    addresses: Optional[List[StatusAddress]] = None
    ports: Optional[List[StatusPort]] = None
    players: Optional[StatusPlayerStatus] = None
    counters: Optional[Dict[str, StatusCounterStatus]] = None
    lists: Optional[Dict[str, StatusListStatus]] = None
    __properties: ClassVar[List[str]] = ["state", "address", "addresses", "ports", "players", "counters", "lists"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SdkGameServerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item_ports in self.ports:
                if _item_ports:
                    _items.append(_item_ports.to_dict())
            _dict['ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of players
        if self.players:
            _dict['players'] = self.players.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in counters (dict)
        _field_dict = {}
        if self.counters:
            for _key_counters in self.counters:
                if self.counters[_key_counters]:
                    _field_dict[_key_counters] = self.counters[_key_counters].to_dict()
            _dict['counters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in lists (dict)
        _field_dict = {}
        if self.lists:
            for _key_lists in self.lists:
                if self.lists[_key_lists]:
                    _field_dict[_key_lists] = self.lists[_key_lists].to_dict()
            _dict['lists'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SdkGameServerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "state": obj.get("state"),
            "address": obj.get("address"),
            "addresses": [StatusAddress.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "ports": [StatusPort.from_dict(_item) for _item in obj["ports"]] if obj.get("ports") is not None else None,
            "players": StatusPlayerStatus.from_dict(obj["players"]) if obj.get("players") is not None else None,
            "counters": dict(
                (_k, StatusCounterStatus.from_dict(_v))
                for _k, _v in obj["counters"].items()
            )
            if obj.get("counters") is not None
            else None,
            "lists": dict(
                (_k, StatusListStatus.from_dict(_v))
                for _k, _v in obj["lists"].items()
            )
            if obj.get("lists") is not None
            else None
        })
        return _obj


